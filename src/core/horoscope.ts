import axios from 'axios'

import { normalize } from '../utils'

const rus = [
  '–æ–≤–µ–Ω',
  '—Ç–µ–ª–µ—Ü',
  '–±–ª–∏–∑–Ω–µ—Ü—ã',
  '—Ä–∞–∫',
  '–ª–µ–≤',
  '–¥–µ–≤–∞',
  '–≤–µ—Å—ã',
  '—Å–∫–æ—Ä–ø–∏–æ–Ω',
  '—Å—Ç—Ä–µ–ª–µ—Ü',
  '–∫–æ–∑–µ—Ä–æ–≥',
  '–≤–æ–¥–æ–ª–µ–π',
  '—Ä—ã–±—ã',
]

const eng = [
  'aries',
  'taurus',
  'gemini',
  'cancer',
  'leo',
  'virgo',
  'libra',
  'scorpio',
  'sagittarius',
  'capricorn',
  'aquarius',
  'pisces',
]

function getAstrologicalSigns(query: string): string {
  return eng[rus.indexOf(query.toLowerCase())]
}

export const getHoroscope = async (query: string): Promise<string> => {
  try {
    const sign = getAstrologicalSigns(query)
    const urlToday = `https://horoscopes.rambler.ru/api/front/v1/horoscope/today/${sign}/`
    const urlTomorrow = `https://horoscopes.rambler.ru/api/front/v1/horoscope/tomorrow/${sign}/`

    if (!sign) {
      return '–ù—É–∂–µ–Ω –í–∞—à –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫'
    }

    const [today, tomorrow] = await Promise.all([
      axios(urlToday, { timeout: 10000 }).then((x) => x.data),
      axios(urlTomorrow, { timeout: 10000 }).then((x) => x.data),
    ])

    return `<b>–°–µ–≥–æ–¥–Ω—è:</b>\n\n${normalize(today.text)}\n
<b>–ó–∞–≤—Ç—Ä–∞:</b>\n\n${normalize(tomorrow.text)}`
  } catch (e) {
    return 'Request error üòø'
  }
}
