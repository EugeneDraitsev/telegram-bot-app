const timeout = 5_000
const weatherToken = process.env.OPEN_WEATHER_MAP_TOKEN || 'set_your_token'

const WIND_DIRECTION = ['C', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó', 'C']

const ICONS = {
  '01d': '‚òÄÔ∏è',
  '01n': 'üåô',
  '02d': '‚õÖÔ∏è',
  '02n': '‚õÖÔ∏è',
  '03d': '‚òÅÔ∏è',
  '03n': '‚òÅÔ∏è',
  '04d': 'üå©',
  '04n': 'üå©',
  '09d': 'üåß',
  '09n': 'üåß',
  '10d': 'üå¶',
  '10n': 'üå¶',
  '11d': '‚õà',
  '11n': '‚õà',
  '13d': 'üå®',
  '13n': 'üå®',
  '50d': 'üå´',
  '50n': 'üå´',
}

type Icon = keyof typeof ICONS

function getCountryFlagEmoji(countryCode: string) {
  const codePoints = countryCode
    .toUpperCase()
    .split('')
    .map((char) => 127397 + char.charCodeAt(0))

  return String.fromCodePoint(...codePoints) || 'üôà'
}

const getWeatherUrlForecast = (locationURL: string) =>
  `http://api.openweathermap.org/data/2.5/forecast/daily?q=${encodeURI(
    locationURL,
  )}&units=metric&lang=ru&APPID=${weatherToken}`

const getWeatherUrlNow = (locationURL: string) =>
  `http://api.openweathermap.org/data/2.5/weather?q=${encodeURI(
    locationURL,
  )}&units=metric&lang=ru&APPID=${weatherToken}`

const getWeatherIcon = (value: string) =>
  ICONS[value.toLowerCase() as Icon] || 'üôà'

const getWindDirection = (value: number) =>
  WIND_DIRECTION[Math.round(value / 45)]

const formatTemperature = (value: number) => `<b>${value}¬∞C</b>`

export const getWeather = async (location: string) => {
  try {
    const [infoForecast, infoNow] = await Promise.all([
      fetch(getWeatherUrlForecast(location), {
        signal: globalThis.AbortSignal.timeout(timeout),
      }).then((x) => x.json()),
      fetch(getWeatherUrlNow(location), {
        signal: globalThis.AbortSignal.timeout(timeout),
      }).then((x) => x.json()),
    ])

    const city = infoForecast.city.name
    const { country } = infoForecast.city
    const { humidity } = infoNow.main
    const wind = infoNow.wind.speed
    const dir = getWindDirection(infoNow.wind.deg)

    const temp = formatTemperature(infoNow.main.temp)
    const dayTempHigh = formatTemperature(infoForecast.list[0].temp.max)
    const dayTempLow = formatTemperature(infoForecast.list[0].temp.min)
    const nextDayTempHigh = formatTemperature(infoForecast.list[1].temp.max)
    const nextDayTempLow = formatTemperature(infoForecast.list[1].temp.min)
    const nextNextDayTempHigh = formatTemperature(infoForecast.list[2].temp.max)
    const nextNextDayTempLow = formatTemperature(infoForecast.list[2].temp.min)

    const nowDescription = infoNow.weather[0].description
    const dayDescription = infoForecast.list[0].weather[0].description
    const nextDayDescription = infoForecast.list[1].weather[0].description
    const nextNextDayDescription = infoForecast.list[2].weather[0].description

    const nowIcon = getWeatherIcon(infoNow.weather[0].icon)
    const dayIcon = getWeatherIcon(infoForecast.list[0].weather[0].icon)
    const nextDayIcon = getWeatherIcon(infoForecast.list[1].weather[0].icon)
    const nextNextDayIcon = getWeatherIcon(infoForecast.list[2].weather[0].icon)
    const flag = getCountryFlagEmoji(country)
    return `–ì–æ—Ä–æ–¥: ${city} —Ä–µ–≥–∏–æ–Ω: ${flag} ${country}\
              \n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: ${dir}, —Å–∫–æ—Ä–æ—Å—Ç—å: ${wind}–º/—Å\
              \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%\
              \n${nowDescription} ${nowIcon}\
              \n–°–µ–≥–æ–¥–Ω—è: ${dayTempHigh} / ${dayTempLow}, ${dayDescription} ${dayIcon}\
              \n–ó–∞–≤—Ç—Ä–∞: ${nextDayTempHigh} / ${nextDayTempLow}, ${nextDayDescription} ${nextDayIcon}\
              \n–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞: ${nextNextDayTempHigh} / ${nextNextDayTempLow}, ${nextNextDayDescription} ${nextNextDayIcon}`
  } catch (e) {
    return '–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç'
  }
}
